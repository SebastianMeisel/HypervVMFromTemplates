#+AUTHOR: Sebastian Meisel
#+DATE: <2022-06-28 Di>
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle Create-Switches.ps1

* Virtuelle Switche für HyperV

Die Skripte [[file:New-VMFromISO.org][New-VMFromISO.ps1]] und [[file:New-VMFromTemplate.org][New-VMFromTemplate.ps1]] gehen davon aus,
dass zwei Switche existieren:

- "WAN": Externer Switch (Bridge)
- "LAN": Interner Switch (Nat)
- "PRIV": Privater Switch 

Dieses Skript ist inspiriert von [[https://techsnips.io/snips/how-to-manage-hyper-v-virtual-switches-with-powershell/][https://techsnips.io/]].
  
Diese Angaben speichern wir zunächst in einem dictionary

#+BEGIN_SRC PS
  $Switches = [ordered]@{ 'WAN' = 'External' ; 'LAN' = 'Internal' ; 'PRIV' = 'Private'; }
#+END_SRC

* Funktion New-LabSwitch
Die folgende Funktion erstellt einen Switch.
** Parameter

Name und Typ werden als Parameter übergeben. Als Default für den Typ
wird /External/ definiert:

#+BEGIN_SRC PS
function New-LabSwitch
{
	param(
		[Parameter(Mandatory)]
		[string]$Name,

		[Parameter()]
		[string]$Type = 'External'
	)
#+END_SRC

** Switch exitiert noch nicht?
Dann wird geprüft, ob der Switch noch nicht existiert, wenn
nicht, wird ein neuer Switch erstellt: 

#+BEGIN_SRC PS
	if( -not (Get-VMSwitch `
			-Name $Name `
			-SwitchType $Type `
			-ErrorAction SilentlyContinue))
	{
	Write-Verbose `
		-Message "Creating switch [$Name]..."
#+END_SRC

*** Externer Switch
Soll ein Externer Switch erstellt werden, wird der Name des
Netzwerkdevices genutzt und `-AllowManagementOS` auf `true`
gesetzt:

#+BEGIN_SRC PS
	if ( $Type -eq 'External' )
	{
		$null = New-VMSwitch `
		      -name $Name  `
		      -NetAdapterName Ethernet `
		      -AllowManagementOS $true
		}
#+END_SRC

*** Interner oder Privater Switch

Ansonsten setzen wir neben dem Namen nur den Typ des Switches:

#+BEGIN_SRC PS
		else
		{
			$null = New-VMSwitch `
				-Name $Name `
				-SwitchType $Type
		}

		Write-Verbose `
			-Message "Switch [$Name] created."
	}
#+END_SRC

** Switch existiert
Falls der Switch existiert, melden wir das und tun sonst nichts.
#+BEGIN_SRC PS
	else
	{
		Write-Verbose `
			-Message "Switch [$Name] has already been created!"
	}
}
#+END_SRC

* Definierte Switche erstellen

Nun erstellen wir die [[* Virtuelle Switche für HyperV][anfangs]] im Dictionary definierten Switche:

#+BEGIN_SRC PS
ForEach ($pair in $Switches.GetEnumerator()) {
   New-LabSwitch -Name "$($pair.key)" -Type "$($pair.value)" -Verbose
}
# Abschluss bestätigen
Write-Host -NoNewLine "Press any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
#+END_SRC




