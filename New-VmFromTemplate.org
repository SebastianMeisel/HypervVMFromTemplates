#+AUTHOR: Sebastian Meisel
#+DATE: <2022-06-14 Tue>
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle New-VMFromTemplate.ps1

* Templates vorbereiten

Zunächst muss in Hyper V einne Virtuelle Maschine erstellt werden.
Aus dieser soll ein Template erstellt werden.
Dazu muss die VM im HyperV-Manager gewählt werden.

Die VHD muss in den Ordner 'C:\\Users\User\HyperV\Templates' als Vorlage kopiert werden.
Dieser Pfad muss im Skript entsprechend angepasst werden.

Die weiteren Anweisungen (das folgende Skript) basieren auf
[[https://www.altaro.com/hyper-v/create-virtual-machine-from-template-powershell/][https://www.altaro.com/hyper-v/create-virtual-machine-from-template-powershell/]] und
[[https://www.starwindsoftware.com/blog/automate-the-hyper-v-virtual-machine-deployment-with-powershell][https://www.starwindsoftware.com/blog/automate-the-hyper-v-virtual-machine-deployment-with-powershell]].

* Skript Dokumentation
Zunächst ist es Best-Practice am Anfang eines powershell-Skripts eine kurze Hilfe anzubiete:
#+BEGIN_SRC PS
#requires -version 7.0

<#
.SYNOPSIS
Provision a new Hyper-V virtual machine based on a template
.DESCRIPTION
This script will create a new Hyper-V virtual machine based on a template or
hardware profile. You can create a Small, Medium or Large virtual machine. All
virtual machines will use the same virtual switch and the same paths for the 
virtual machine and VHDX file. You can provide an ansible-playbook to configure
the Server. You can also enable a second (internal) switch.

This script requires the Hyper-V-module 2.0 for PowerShell 7 or newer.
.PARAMETER Name
   A Name used for the VM.

.PARAMETER VMConfiguration
You can choose between three configurations:
Small (default)
        MemoryStartup=512MB
        ProcCount=1
        MemoryMinimum=512MB
        MemoryMaximum=1GB

Medium
        MemoryStartup=512MB
        ProcCount=2
        MemoryMinimum=512MB
        MemoryMaximum=2GB

Large
        MemoryStartup=1GB
        ProcCount=4
        MemoryMinimum=512MB
        MemoryMaximum=4GB
.PARAMETER VMTemplate
   Name of one of the templates in the templates-subdirectory without the
   `_tmp.vhdx` extension.       
.PARAMETER Playbook
   Name of one of the playbooks of the templates-subdirectory without the
  `yaml`extensions.
.PARAMETER SecondSwitch
  By default the VM is connected to the external virtual switch named "WAN".
  With this switch you can add a second, internal switch named "LAN".
  Both switches must be configured beforehand.
.PARAMETER Passthru
  With this switch set, the process is send to the background. You can do diffent
  things in the Powershell.
.EXAMPLE
PS C:\Scripts\> .\New-VMFromTemplate WEB2012-01 -VMTemplate Ubuntu -VMType Small -passthru

Name       State CPUUsage(%) MemoryAssigned(M) Uptime   Status
----       ----- ----------- ----------------- ------   ------
WEB2012-01 Off   0           0                 00:00:00 Operating normally
.NOTES
   Author: Sebastian Meisel
   Contact: sebastian.meisel@gmail.com
   Licence: GPLv3 (https://www.gnu.org/licenses/gpl-3.0.en.html)
.LINK
New-VM
Set-VM
#>
[cmdletbinding(SupportsShouldProcess)]
#+END_SRC

* Skript-Parameter
Als  nächstes müssen einige Parameter gesetzt werden:
Für die verfügbaren Templates und Playbooks nutzen wir jeweils einen
[[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_argument_completion?view=powershell-7.2#argumentcompleter-attribute][ArgumentCompleter]], der die entsprechenden Unterverzeichnisse
durchsucht und eine Auswahl möglicher Kandidaten zusammenstellt.

#+BEGIN_SRC PS
Param(
[Parameter(Position=0,Mandatory)]
[string]$Name,
[ValidateSet("Small","Medium","Large")]
[string]$VMConfiguration = "Small",
[ArgumentCompleter( {
    param ($Command, $Parameter, $WordToComplete, $CommandAst, $FakeBoundParams)
    $Completions = @()
    $Candidates = $(Get-ChildItem -Path '.\Templates\*_tmp.vhdx' -File | Select-Object -Property Name | Where-Object {$_.Name -like "*$($WordToComplete)*" })
    ForEach ( $Candidate in $Candidates ){
        $Completions += $Candidate.Name.Split('_')[0]
    }
    return $Completions
} )]
[string]$VMTemplate,
[ArgumentCompleter( {
    param ($Command, $Parameter, $WordToComplete, $CommandAst, $FakeBoundParams)
    $Completions = @()
    $Candidates = $(Get-ChildItem -Path '.\ansible\*.yml' -File | Select-Object -Property Name | Where-Object {$_.Name -like "*$($WordToComplete)*"  -and ! ($_.Name.contains("update") -or $_.Name.contains("vault"))})
    ForEach ( $Candidate in $Candidates ){
        $Completions += $Candidate.Name.Split('.')[0]
    }
    return $Completions
} )]
[string]$Playbook,
[switch]$SecondSwitch,
[switch]$Passthru
)
#+END_SRC

* Allgemeine Parameter
Auf Wunsch (Option '-Verbose') sollte immer wieder über den
Fortschritt informiert werden, was mit 'Write-Verbose'
erreicht wird.
Des weiteren sollten einige Parameter gesetzt werden, die
von der konkreten VM-Konfiguration unabhängig sind:

#+BEGIN_SRC PS
Write-Verbose "Creating new $VMConfiguration virtual machine"

# Path-Präfix
$Pre="C:\\Users\User\HyperV"

# allgemeine VM Parameter
$Switch = "WAN"
$Path = "$($Pre)\VM"
$TemplatePath = "$($Pre)\Templates\$($VMTemplate)_tmp.vhdx"
$VHDPath = "$($Pre)\VHD\$($name).vhdx"

# ansible Dateien 
$Ansible = "$($Pre)/ansible"
#+END_SRC

* VM-Konfigurationen

Zunächst definiere ich ein Set von vordefinierten VM-Konfigurationen: Small, Medium und
Large - je nach Arbeitsspeicher und CPU-Cores:

#+BEGIN_SRC PS
Switch ($VMConfiguration) {
"Small" {
$MemoryStartup=512MB
$ProcCount=1
$MemoryMinimum=512MB
$MemoryMaximum=1GB
}

"Medium" {
$MemoryStartup=512MB
$ProcCount=2
$MemoryMinimum=512MB
$MemoryMaximum=2GB
}

"Large" {
$MemoryStartup=1GB
$ProcCount=2
$MemoryMinimum=512MB
$MemoryMaximum=4GB
}
}
#+END_SRC

* Hash-Tables

Jetzt müssen wir Hash-Tables für die Parameter der Cmdlets definieren, die zum Erstellen und Konfigurieren der VM genutzt werden.

#+BEGIN_SRC PS
#define a hash table of parameters for New-VM
$newParam = @{
 Name=$Name
 SwitchName=$Switch
 MemoryStartupBytes=$MemoryStartup
 Path=$Path
 ErrorAction="Stop"
}

#define a hash table of parameters for Set-VM
$setParam = @{
 ProcessorCount=$ProcCount
 DynamicMemory=$True
 MemoryMinimumBytes=$MemoryMinimum
 MemoryMaximumBytes=$MemoryMaximum
 ErrorAction="Stop"
}  
#+END_SRC

* Admin Rechte

Um die VM zu erstellen brauchen wir nun Adminrechte:

#+BEGIN_SRC PS :tangle no
# Elevate rights if nessesary.
# Get the ID and security principal of the current user account
$myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()
$myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)
#
# Get the security principal for the Administrator role
$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator

# Check to see if we are currently running "as Administrator"
if ($myWindowsPrincipal.IsInRole($adminRole))
{
    	# We are running "as Administrator" - so change the title and background color to indicate this
    	$Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Elevated)"
	$Host.UI.RawUI.BackgroundColor = "DarkBlue"
	clear-host
}
else
{
	# We are not running "as Administrator" - so relaunch as administrator
	# Create a new process object that starts PowerShell
	$newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
	# Specify the current script path and name as a parameter
	$newProcess.Arguments = $myInvocation.MyCommand.Definition;
	# Indicate that the process should be elevated
	$newProcess.Verb = "runas";
	# Start the new process
	[System.Diagnostics.Process]::Start($newProcess);
	# Exit from the current, unelevated, process
	exit
}

#+END_SRC

* VM erstellen 

An dieser Stelle erstellen wir eine Basis-VM:

#+BEGIN_SRC PS
if ($Passthru) {
    $setParam.Add("Passthru",$True)
}
Try {
    Write-Verbose "Creating new virtual machine"
    Write-Verbose ($newParam | out-string)
    $VM = New-VM @newparam -NoVHD
}
Catch {
    Write-Warning "Failed to create virtual machine $Name"
    Write-Warning $_.Exception.Message
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    #bail out
    Return
}  
#+END_SRC

* VHD kopieren

Als nächstes kopieren wir die Vorlage-VHD, um sie für die neue VM zu nutzen:

#+BEGIN_SRC PS
if ($VM){
  Try {
    Write-Verbose "Copy $TemplatePath to $VHDPATH."
    Copy-Item $TemplatePath $VHDPath
    ADD-VMHardDiskDrive -VMName $Name -Path $VHDPath
  }
  Catch {
    Write-Warning "Failed to add virtual harddisk $Name"
    Write-Warning $_.Exception.Message
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    #bail out
    Return
  }
}
#+END_SRC

* VM anpassen

Abschließend müssen wir einige abschließende Anpassungen vornehmen:

#+BEGIN_SRC PS 
if ($VM) {
    Try {
        Write-Verbose "Configuring new virtual machine"
        Write-Verbose ($setParam | out-string)
        $VM | Set-VM @setparam
    }
    Catch {
    Write-Warning "Failed to configure virtual machine $Name"
    Write-Warning $_.Exception.Message
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    #bail out
    Return
    }
}
#+END_SRC

** Eventuell Zweiten Switch hinzufügen

Wenn der `-SecondSwitch` gewählt wurde wird eine zweite virtuelle
Netzwerkkarte hinzugefügt und mit dem Internen Switch 'VM' verbunden.
! DIESER MUSS VORHER IN HYPERV ANGELEGT WERDEN !

#+BEGIN_SRC PS
Try{
  if ($SecondSwitch) {
    Add-VMNetworkAdapter -SwitchName "LAN" -VMName $Name -Name "Second"
  }
}
Catch{
    Write-Warning "Failed to add second Switch 'VM'."
    Write-Warning $_.Exception.Message
    #bail out
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Return
}
#+END_SRC


* VM starten

Endlich ist es an der Zeit, die VM zu starten:

#+BEGIN_SRC PS
Try{
  Start-VM -Name $Name
  Wait-VM -Name $Name
}
Catch{
    Write-Warning "Failed to start virtual machine $Name."
    Write-Warning $_.Exception.Message
    #bail out
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Return
}

#+END_SRC

* ssh-Config anpassen

Nun müssen wir den Eintrag in der Datei `~\.ssh\config` des
Default-wsl Nutzers anpassen. Dafür müssen wir zunächst die
IP der VM ermitteln und diese dann als Hostnamen eintragen.
Dafür ermitteln wir zunächst die Netzwerk-Adapter der VM.
Dann fragen wir die ersten IP-Adress-Eintrag ab, da dieser
die IPv4-Adresse beinhaltet.
Wir müssen zudem warten, bis wir eine gültige IPv4-Adresse
bekommen. 
Diese tragen wir dann mittels Wsl und sed in
die Konfigurationsdatei ein. 

#+BEGIN_SRC PS
Try{
    $Adapters=(Get-VM $Name | Get-VMNetworkAdapter)
    Write-Host -NoNewline "Waiting for IP from VM"
    While ( !$Adapters[0].IPAddresses[0] ) {
      $Adapters = (Get-VMNetworkAdapter -VMName $Name)  && 
      Start-Sleep 1  &&
      $count++
      Write-Host -NoNewline "."
      if ($count -ge 100 ) {return}
    }
    While ( !$Adapters[0].IPAddresses[0].contains("192.") ) {
      $Adapters = (Get-VMNetworkAdapter -VMName $Name)  && 
      Start-Sleep 1  &&
      $count++
      Write-Host -NoNewline "."
      if ($count -ge 100 ) {return}
    }
    Write-Host ""
    Write-Verbose "Looking for Adapter connected to Switch 'Internet' "
    ForEach ($Adapter in $Adapters) {
      if ($Adapter.SwitchName -eq 'Internet'){
        Write-Verbose "Found Adapter connected to Switch 'Internet' " 
        $IP=$Adapter.IPAddresses[0] 
        Write-Verbose "Setting hostname to $IP." 
        wsl sed -i "/template/,+1s/Hostname.*$/Hostname        $IP/" ~/.ssh/config &&
        wsl cat ~/.ssh/config 
      }
    }
}  
Catch{
    Write-Warning "Failed to configure Open-SSH with $IP."
    Write-Warning $_.Exception.Message
    #bail out
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Set-Location "$($Pre)"
    Return
}
#+END_SRC

* Ansible Playbook ausspielen

Falls über den Parameter '-Playbook' ein Playbook aus dem
Ansible-Unterverzeichnis angegeben wurde, soll dieses
ausgespielt werden.

Dafür muss zunächst ins Ansible-Unterverzeichnis gewechselt werden.
#+BEGIN_SRC PS
Try{
   # need to be in ansible subdirectory
   Set-Location $Ansible
   if ($Playbook){
     Write-Verbose "Playing playbook $Playbook."
     wsl ansible-playbook -i hosts --vault-id=/etc/ansible/password.txt "$($Playbook)"
   }
}
Catch{
    Write-Warning "Failed to run playbook $Playbook."
    Write-Warning $_.Exception.Message
    #bail out
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Set-Location "$($Pre)"
    Return
}
#+END_SRC

* Neuer Hostname

Natürlich brauchen wir nun einen individuellen Hostname. Dazu nutzen Ansible unter Wsl2:

#+BEGIN_SRC PS
Try{
   wsl ansible-playbook -i hosts --vault-id=/etc/ansible/password.txt -e "new_hostname=$Name" "hostname.yml"
}
Catch{
    Write-Warning "Failed to rename virtual machines hostname to $Name."
    Write-Warning $_.Exception.Message
    #bail out
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Set-Location "$($Pre)"
    Return
}
#+END_SRC

* VM neu starten

Abschließen starten wir die VM neu, um alle Änderungen zu übernehmen.

#+BEGIN_SRC PS
Try{
   Restart-VM $Name
}
Catch{
    Write-Warning "Failed to restart virtual machines hostname to $Name."
    Write-Warning $_.Exception.Message
    #bail out
    Write-Host -NoNewLine "Press any key to continue..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Set-Location "$($Pre)"
    Return
}

Set-Location "$($Pre)"
Write-Host -NoNewLine "Press any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
#+END_SRC
