# -*- org-src-preserve-indentation: t -*-
#+AUTHOR: Sebastian Meisel
#+DATE: <2022-06-14 Tue>
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle nginx.yml


* Nginx installieren
** Server updaten
Bevor neue Software (in diesem Fall Nginx) sollte das
System aktualisiert werden.

*** Update-Server
Zunächst müssen wir das System updaten. Dabei ist das
Problem, dass wir nicht wissen, mit welchem System wir es zu
tun haben, wenn wir schiedene Templates mit
unterschiedlichen Distributionen nutzen. Hierbei können uns
Variablen helfen. Die Idee habe ich von [[https://radeksprta.eu/posts/make-ansible-playbook-distribution-agnostic/][https://radeksprta.eu]].
Hierfür definieren wir verschiedene Tasks je nach OS unter
([[Software_Update.org][Software_Update.org]]) und nutzen sie dann in unserem Playbook:

#+BEGIN_SRC yml 
- hosts: templates
  become: yes
  gather_facts: true
  tasks:
    - name: Update System 
      include_tasks: "update-{{ ansible_os_family }}.yml"
#+END_SRC

** Nginx-Server installieren

Wenn es um die Installation der Software geht, bietet
ansible bereits einen einheitlichen Ansatz mit dem
`package`-Modul.
Man muss nur aufpassen, wenn Packete unterschiedliche Namen,
je nach Distribution habe. Apache2 heißt bei Redhat
z. B. `httpd`. Auch hier bietet [[https://radeksprta.eu/posts/make-ansible-playbook-distribution-agnostic/][https://radeksprta.eu]] eine
Lösung.
Mit Nginx haben wir dieses Problem aber zum Glück nicht.


#+BEGIN_SRC yml
    - name: Install Nginx
      package:
        name: nginx
        state: present
#+END_SRC

** Nginx-Server starten

Als nächstes muss der Service gestartet werden.
#+BEGIN_SRC yml
    - name: Start Nginx-service
      service:
        name: nginx
        enabled: yes
        state: started
#+END_SRC

** Download Webpage template

Nun laden wir die Webseite (Vielen Dank an:
[[https://github.com/tlaskowsky/one-page-web-html5up][https://github.com/tlaskowsky/]]) per git herunter. Dazu
müssen wir zu nächst git installieren:

#+BEGIN_SRC yml
    - name: Install git
      package:
        name: git
        state: present
#+END_SRC

Dann klonen wir das Repository.

#+BEGIN_SRC yml
    - name: Clone a github repository
      git:
        repo: https://github.com/tlaskowsky/one-page-web-html5up
        dest: /var/www/one-page-web
        clone: yes
        update: yes
#+END_SRC

*** Server-Konfiguration

Nun müssen wir eine Serverkonfiguration für Nginx erstellen:

#+BEGIN_SRC cfg :tangle one-page-web.cfg
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/one-page-web;
        server_name _;
        location / {
                try_files $uri $uri/ =404;
        }
}
#+END_SRC

Diese muss als nächstes auf den Server kopiert werden ...

#+BEGIN_SRC yml
    - name: copy the nginx config file and restart nginx
      copy:
        src: one-page-web.cfg
        dest: /etc/nginx/sites-available/one-page-web.cfg
      become: yes
#+END_SRC

... und unter `/etc/nginx/sites-enabled`verlinkt werden:

#+BEGIN_SRC yml
    - name: create symlink
      file:
        src: /etc/nginx/sites-available/one-page-web.cfg
        dest: /etc/nginx/sites-enabled/default
        state: link
      become: yes
#+END_SRC

** Nginx-Server neu starten

#+BEGIN_SRC yml
    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become: yes
#+END_SRC
